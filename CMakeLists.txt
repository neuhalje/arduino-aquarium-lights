cmake_minimum_required(VERSION 3.2)
project(aquarium_lights)

# This cmake file has been generated by 'platformio init --ide clion -b uno' and is NOT portable
set(ENV{PATH} "/usr/local/opt/pyenv/versions/PlatformIO.venv/bin:/usr/local/opt/pyenv/libexec:/usr/local/opt/pyenv/plugins/python-build/bin:/usr/local/Cellar/pyenv-virtualenv/20160202/shims:/usr/local/opt/pyenv/libexec:/usr/local/opt/pyenv/plugins/python-build/bin:/usr/local/opt/pyenv/shims:/usr/local/opt/pyenv/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin")
set(PLATFORMIO_CMD "/usr/local/opt/pyenv/versions/PlatformIO.venv/bin/platformio")

include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/variants/standard")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/cores/arduino")
include_directories("$ENV{HOME}/Documents/projects/arduino/aquarium_lights/lib/Adafruit_NeoPixel")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Audio/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Bridge/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/EEPROM")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Esplora/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Ethernet/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Firmata")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/GSM/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/HID")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Keyboard/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/LiquidCrystal/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Mouse/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/RobotIRremote/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Robot_Control/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Robot_Motor/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/SD/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/SPI")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Scheduler/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Servo/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/SoftwareSerial")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/SpacebrewYun/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Stepper/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/TFT/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Temboo/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/USBHost/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/WiFi/src")
include_directories("$ENV{HOME}/.platformio/packages/framework-arduinoavr/libraries/Wire")
include_directories("$ENV{HOME}/.platformio/packages/toolchain-atmelavr/avr/include")
include_directories("$ENV{HOME}/.platformio/packages/toolchain-atmelavr/bfd/include")
include_directories("$ENV{HOME}/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/4.8.1/include")
include_directories("$ENV{HOME}/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/4.8.1/include-fixed")

add_definitions(-DF_CPU=16000000L)
add_definitions(-DARDUINO_ARCH_AVR)
add_definitions(-DARDUINO_AVR_UNO)
add_definitions(-DARDUINO=10607)
add_definitions(-DPLATFORMIO=020803)
add_definitions(-D__AVR_ATmega328P__)

add_custom_target(
        PLATFORMIO_BUILD ALL
        COMMAND ${PLATFORMIO_CMD} -f -c clion run
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
        PLATFORMIO_UPLOAD ALL
        COMMAND ${PLATFORMIO_CMD} -f -c clion run --target upload
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
        PLATFORMIO_CLEAN ALL
        COMMAND ${PLATFORMIO_CMD} -f -c clion run --target clean
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
        PLATFORMIO_PROGRAM ALL
        COMMAND ${PLATFORMIO_CMD} -f -c clion run --target program
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
        PLATFORMIO_UPLOADFS ALL
        COMMAND ${PLATFORMIO_CMD} -f -c clion run --target uploadfs
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
        PLATFORMIO_UPDATE_ALL ALL
        COMMAND ${PLATFORMIO_CMD} -f -c clion update
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)

add_executable(aquarium_lights
        src/main.cpp
        src/debug/Debug.h src/debug/Debug.cpp src/color/Color.h src/color/Color.cpp src/color/Color.h src/color/ColorShift.cpp src/color/ColorShift.h)


### TEST Red Tape
enable_testing()
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/test_lib/unity/src)
add_library(UnityTest test_lib/unity/src/unity.c)

#### Tests
# not working

add_executable(color_test
        test/color/test_color.cpp
         src/color/Color.h src/color/Color.cpp src/color/Color.h src/color/ColorShift.cpp src/color/ColorShift.h)
target_link_libraries(color_test debug UnityTest)

add_test(ColorTest color_test)


